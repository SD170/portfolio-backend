version: '3.9'

# run with:
# docker compose up -d(for detach mode) --build(for building after changes)
# docker compose down
# docker compose build

services:
  # MongoDB services
  mongo_db: # name of the service
    container_name: db_container # if not provided explicitly; service name would be container name
    image: mongo:latest # the image the container will run; we can pass version instead of latest
    restart: always # restart the service on each docker daemon restart
    
    # Port is needed to connect from CLI with
    # mongosh --port 2717
    ports:
      - 2717:27107 
    
    volumes:
      - mongo_db_volume:/data/db
  
  # nodejs api service
  portfolio_api:
    # here, we wan't to use the image in the Dockerfile, and we want that image as container
    # so instead of "image:" we'll use "build:" to provide the Dockerfile which'll build the image
    build: . # . means look for a Dockerfile in the same dir
    ports:
      - 5000:5000 
      # local:container -> forwards the container port to local; thus we can communicate with the api in the container

    # we can directly write the env variables
    # environment:
    #   - name=value

    # or we can use a .env file
    env_file:
      - config.env

    # Environment:
    # in the env file MONGOHOST was localhost;
    # but as localhost(of node api container) and Mongo container is different 
    # (both are in different hosts, different containers)

    # The value could've been mongo_db(service name) or db_container(container name)
    # both are fine
    environment:
      MONGOHOST: mongo_db
    
    # Auto reload on changes in code:
    # To ask docker to map the current directory outside container (the dot .) to 
    # the working directory inside the container (/usr/src/app) as mentioned in the Dockerfile for nodeAPI
    # we need a volume.

    # now if we run with nodemon, docker can restart the server on code changes.
    volumes:
      - .:/usr/src/app

    # we need the mongo_db service to run first
    depends_on:
      - mongo_db  # name of the mongoDB service



# creating the volume for mongo_db
volumes:
  mongo_db_volume: {} # we pass options in the object
